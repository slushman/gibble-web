---
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import Breadcrumbs from '@components/Breadcrumbs.astro';
import { getStateBySlug, slugify, STATES } from '@data/locations';

export async function getStaticPaths() {
  const restaurants = await getCollection('restaurants', ({ data }) => {
    return data.draft !== true;
  });

  // Get all unique categories
  const categoryMap = new Map<string, string>();

  restaurants.forEach((restaurant) => {
    restaurant.data.categories?.forEach((category: string) => {
      const slug = slugify(category);
      if (!categoryMap.has(slug)) {
        categoryMap.set(slug, category);
      }
    });
  });

  return Array.from(categoryMap.entries()).map(([slug, name]) => {
    const categoryRestaurants = restaurants.filter((r) =>
      r.data.categories?.some((c: string) => slugify(c) === slug)
    );

    // Group by state
    const byState = categoryRestaurants.reduce((acc: Record<string, any[]>, r) => {
      const state = r.data.state;
      if (!acc[state]) {
        acc[state] = [];
      }
      acc[state].push(r);
      return acc;
    }, {});

    return {
      params: { category: slug },
      props: {
        categoryName: name,
        categorySlug: slug,
        restaurantsByState: byState,
        totalCount: categoryRestaurants.length,
      },
    };
  });
}

const { categoryName, categorySlug, restaurantsByState, totalCount } = Astro.props;

const statesWithCounts = Object.entries(restaurantsByState)
  .map(([stateSlug, restaurants]) => ({
    slug: stateSlug,
    name: getStateBySlug(stateSlug)?.name || stateSlug,
    count: (restaurants as any[]).length,
  }))
  .sort((a, b) => a.name.localeCompare(b.name));

const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Categories', href: '/categories' },
  { label: categoryName },
];
---

<Layout title={`${categoryName} Restaurants - Gibble`}>
  <Breadcrumbs crumbs={breadcrumbs} />

  <div class="mb-8">
    <div class="bg-gradient-to-br from-primary-50 to-primary-100 dark:from-primary-900/50 dark:to-primary-800/50 rounded-2xl p-8 border border-primary-200 dark:border-primary-800">
      <div class="flex items-start gap-4">
        <div class="flex-shrink-0 w-12 h-12 bg-white dark:bg-neutral-800 rounded-lg flex items-center justify-center shadow-sm text-2xl">
          üçΩÔ∏è
        </div>
        <div class="flex-1">
          <h1 class="text-4xl font-display font-bold text-neutral-900 dark:text-neutral-100 mb-3">{categoryName} Restaurants</h1>
          <div class="flex flex-wrap items-center gap-4">
            <div class="flex items-center gap-2">
              <svg class="w-5 h-5 text-primary-600 dark:text-primary-400" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
              </svg>
              <p class="text-lg text-neutral-700 dark:text-neutral-300 font-semibold">
                {totalCount} {totalCount === 1 ? 'restaurant' : 'restaurants'}
              </p>
            </div>
            <div class="flex items-center gap-2">
              <svg class="w-5 h-5 text-primary-600 dark:text-primary-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
              </svg>
              <p class="text-lg text-neutral-700 dark:text-neutral-300 font-semibold">
                {statesWithCounts.length} {statesWithCounts.length === 1 ? 'state' : 'states'}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="mb-8">
    <div class="flex items-center gap-3 mb-6">
      <svg class="w-6 h-6 text-primary-600 dark:text-primary-400" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
      </svg>
      <h2 class="text-2xl font-display font-bold text-neutral-900 dark:text-neutral-100">Browse by State</h2>
    </div>
    <div class="grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
      {statesWithCounts.map((state) => (
        <article class="bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-xl p-5 hover:shadow-lg hover:border-primary-300 transition-all group">
          <a href={`/categories/${categorySlug}/${state.slug}`} class="block">
            <h3 class="text-lg font-semibold text-neutral-900 dark:text-neutral-100 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors mb-2">
              {state.name}
            </h3>
            <p class="text-sm text-neutral-600 dark:text-neutral-400">
              {state.count} {state.count === 1 ? 'restaurant' : 'restaurants'}
            </p>
          </a>
        </article>
      ))}
    </div>
  </div>
</Layout>